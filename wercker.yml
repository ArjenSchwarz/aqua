box: golang
build:
  steps:
    # Sets the go workspace and places package
    # at the right place in the workspace tree.
    # Interferes with storing dist files.
    - wercker/setup-go-workspace:
      package-dir: github.com/ArjenSchwarz/aqua
    # Get the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -t ./...
    - wercker/golint
    - script:
      name: go test
      code: |
          go test ./...
    - script:
        name: Install gox
        code: |
          go get -u -v github.com/inconshreveable/mousetrap
          go get -u -v github.com/mitchellh/gox
    - tcnksm/gox:
        os: "darwin linux windows"
        arch: "386 amd64"
    - install-packages:
      packages: zip
    # We zip up all the different versions to be deployed.
    - script:
        name: create zip files
        code: |
          mkdir dist
          zip -j dist/aqua_lambda.zip $WERCKER_OUTPUT_DIR/pkg/linux_amd64/aqua lambda/index.js
          zip -j dist/aqua_darwin_amd64.zip $WERCKER_OUTPUT_DIR/pkg/darwin_amd64/aqua
          zip -j dist/aqua_darwin_386.zip $WERCKER_OUTPUT_DIR/pkg/darwin_386/aqua
          zip -j dist/aqua_windows_amd64.zip $WERCKER_OUTPUT_DIR/pkg/windows_amd64/aqua.exe
          zip -j dist/aqua_windows_386.zip $WERCKER_OUTPUT_DIR/pkg/windows_386/aqua.exe
          tar czf dist/aqua_linux_amd64.tgz -C $WERCKER_OUTPUT_DIR/pkg/linux_amd64 aqua
          tar czf dist/aqua_linux_386.tgz -C $WERCKER_OUTPUT_DIR/pkg/linux_386 aqua
          cp -R dist $WERCKER_OUTPUT_DIR

deploy:
  github:
    - tcnksm/ghr:
      token: $GITHUB_TOKEN
      input: $WERCKER_SOURCE_DIR/dist
      version: latest
      replace: true
  lambda:
    - arjen/lambda:
      access_key: $AWS_ACCESS_KEY
      secret_key: $AWS_SECRET_KEY
      function_name: aqua
      filepath: $WERCKER_SOURCE_DIR/dist/aqua_lambda.zip
